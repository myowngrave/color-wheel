{"version":3,"sources":["components/ColorWheel/styles.module.scss","store/reducers/index.js","store/reducers/appState.js","components/ColorWheel/index.js","App.js","serviceWorker.js","index.js","store/index.js"],"names":["module","exports","container","thumb","combineReducers","appState","EventListenerMode","capture","xy2polar","x","y","Math","sqrt","atan2","rad2deg","rad","PI","hsl2rgb","hue","saturation","lightness","r1","g1","b1","chroma","hue1","abs","m","ColorWheel","withProps","Object","objectSpread","ratio","window","devicePixelRatio","width","screen","isMobile","size","calculateCanvasSize","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","initialized","canvasCenter","thumbPosition","ctx","initCanvas","canvas","getContext","bcr","getBoundingClientRect","left","top","setState","draw","_this$props","thickness","radius","imageData","createImageData","data","_xy2polar","_xy2polar2","slicedToArray","r","phi","deg","index","_hsl2rgb","_hsl2rgb2","red","green","blue","fillRect","translate","beginPath","arc","clip","putImageData","onMouseMove","bind","assertThisInitialized","document","addEventListener","removeEventListener","clientX","_ref","clientY","vectorX","vectorY","_xy2polar3","_xy2polar4","cos","sin","polay2xy","thumbStyle","react_default","a","createElement","className","styles","ref","height","style","Component","defaultProps","App","components_ColorWheel","Boolean","location","hostname","match","ReactDOM","render","es","store","createStore","reducers","applyMiddleware","thunk","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57434ffc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2UCP3\",\"thumb\":\"styles_thumb__1N9dp\"};","import {combineReducers} from \"redux\";\r\nimport appState from \"./appState\";\r\n\r\nexport default combineReducers({\r\n    appState\r\n})","export default {}","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {withProps} from 'recompose';\r\nimport {isMobile} from 'react-device-detect';\r\nimport styles from './styles.module.scss';\r\n\r\n//region Helpers\r\nconst EventListenerMode = {capture: true};\r\nconst calculateCanvasSize = () => {\r\n        const ratio = window.devicePixelRatio || 1,\r\n            width = window.screen.width * ratio;\r\n        return isMobile ? {\r\n            ratio,\r\n            size: width - 40\r\n        } : {\r\n            ratio,\r\n            size: width * 0.3\r\n        };\r\n    },\r\n    xy2polar = (x, y) => {\r\n        let r = Math.sqrt(x * x + y * y);\r\n        let phi = Math.atan2(y, x);\r\n        return [r, phi];\r\n    },\r\n    polay2xy = (r, phi) => ({\r\n        x: r * Math.cos(phi),\r\n        y: r * Math.sin(phi)\r\n    }),\r\n    rad2deg = rad => ((rad + Math.PI) / (2 * Math.PI)) * 360,\r\n    hsl2rgb = (hue, saturation, lightness) => {\r\n        let chroma = lightness * saturation;\r\n        let hue1 = hue / 60;\r\n        let x = chroma * (1 - Math.abs((hue1 % 2) - 1));\r\n        let r1, g1, b1;\r\n        if (hue1 >= 0 && hue1 <= 1) {\r\n            ([r1, g1, b1] = [chroma, x, 0]);\r\n        } else if (hue1 >= 1 && hue1 <= 2) {\r\n            ([r1, g1, b1] = [x, chroma, 0]);\r\n        } else if (hue1 >= 2 && hue1 <= 3) {\r\n            ([r1, g1, b1] = [0, chroma, x]);\r\n        } else if (hue1 >= 3 && hue1 <= 4) {\r\n            ([r1, g1, b1] = [0, x, chroma]);\r\n        } else if (hue1 >= 4 && hue1 <= 5) {\r\n            ([r1, g1, b1] = [x, 0, chroma]);\r\n        } else if (hue1 >= 5 && hue1 <= 6) {\r\n            ([r1, g1, b1] = [chroma, 0, x]);\r\n        }\r\n\r\n        let m = lightness - chroma;\r\n        let [r, g, b] = [r1 + m, g1 + m, b1 + m];\r\n\r\n        // Change r,g,b values from [0,1] to [0,255]\r\n        return [255 * r, 255 * g, 255 * b];\r\n    };\r\n\r\n//endregion\r\n\r\n@withProps(() => {\r\n    return {\r\n        ...(calculateCanvasSize())\r\n    };\r\n})\r\nclass ColorWheel extends Component {\r\n    static propTypes = {\r\n        size: PropTypes.number,\r\n        ratio: PropTypes.number,\r\n        thickness: PropTypes.number\r\n    };\r\n    static defaultProps = {\r\n        thickness: 0\r\n    };\r\n    state = {\r\n        initialized: false,\r\n        canvasCenter: {x: 0, y: 0},\r\n        thumbPosition: {x: 0, y: 0}\r\n    }\r\n    ctx = null;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onMouseMove = this.onMouseMove.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('mousemove', this.onMouseMove, EventListenerMode)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousemove', this.onMouseMove, EventListenerMode);\r\n    }\r\n\r\n    onMouseMove({clientX, clientY}) {\r\n        if (!this.state.initialized) return;\r\n        const {size} = this.props,\r\n            {canvasCenter} = this.state,\r\n            radius = size * 1.0 / 2;\r\n        const vectorX = clientX - canvasCenter.x,\r\n            vectorY = clientY - canvasCenter.y,\r\n            [_, phi] = xy2polar(vectorX, vectorY),\r\n            thumbPosition = polay2xy(radius, phi);\r\n        thumbPosition.x += radius;\r\n        thumbPosition.y += radius;\r\n\r\n        this.setState({\r\n            thumbPosition\r\n        })\r\n    }\r\n\r\n    initCanvas = canvas => {\r\n        this.ctx = canvas.getContext(\"2d\");\r\n        // calculate canvas center fixed position\r\n        const {size} = this.props,\r\n            bcr = canvas.getBoundingClientRect(),\r\n            canvasCenter = {\r\n                x: bcr.left + size / 2,\r\n                y: bcr.top + size / 2\r\n            };\r\n        this.setState({canvasCenter, initialized: true}, () => this.draw());\r\n    };\r\n    draw = () => {\r\n        let {size, thickness} = this.props,\r\n            pixelPadding = 3,\r\n            radius = size / 2,\r\n            ctx = this.ctx,\r\n            imageData = ctx.createImageData(size, size),\r\n            data = imageData.data;\r\n        for (let x = -radius; x < radius; x++)\r\n            for (let y = -radius; y < radius; y++) {\r\n                let [r, phi] = xy2polar(x, y);\r\n                if (r > radius) continue;\r\n                if (thickness > 0 && r < (radius - thickness - pixelPadding)) continue;\r\n                let deg = rad2deg(phi),\r\n                    adjustedX = x + radius,\r\n                    adjustedY = y + radius,\r\n                    pixelWidth = 4,\r\n                    index = (adjustedX + (adjustedY * size)) * pixelWidth;\r\n                let hue = deg,\r\n                    sat = r / radius,\r\n                    // lightness = r / (2 * radius) + 1 / 2,\r\n                    lightness = 1.0,\r\n                    [red, green, blue] = hsl2rgb(hue, sat, lightness),\r\n                    alpha = 255;\r\n                data[index] = red;\r\n                data[index + 1] = green;\r\n                data[index + 2] = blue;\r\n                data[index + 3] = alpha;\r\n            }\r\n\r\n        //create clipping path\r\n        ctx.fillRect(0, 0, 2 * radius, 2 * radius);\r\n        ctx.translate(radius, radius);\r\n        radius -= pixelPadding;\r\n        ctx.beginPath();\r\n        ctx.arc(0, 0, radius, 0, Math.PI * 2, true);\r\n        ctx.clip();\r\n\r\n        //fill with calculated data\r\n        // ctx.translate(0, 0);\r\n        ctx.putImageData(imageData, 0, 0);\r\n    };\r\n\r\n    render() {\r\n        const size = this.props.size,\r\n            {thumbPosition} = this.state,\r\n            thumbStyle = {\r\n                top: thumbPosition.y + 'px',\r\n                left: thumbPosition.x + 'px',\r\n            };\r\n        return <div className={styles.container}>\r\n            <canvas ref={this.initCanvas} width={size} height={size}/>\r\n            {this.state.initialized && <div className={styles.thumb} style={thumbStyle}/>}\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ColorWheel;","import React, {Component} from 'react';\r\nimport ColorWheel from \"./components/ColorWheel\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <ColorWheel thickness={20}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from \"react-redux\";\r\nimport configStore from './store'\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Provider store={configStore()}><App/></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducers from './reducers'\r\n\r\nexport default () => createStore(reducers, applyMiddleware(thunk))"],"sourceRoot":""}