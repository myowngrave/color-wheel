{"version":3,"sources":["store/reducers/index.js","store/reducers/appState.js","components/ColorWheel/index.js","App.js","serviceWorker.js","index.js","store/index.js"],"names":["combineReducers","appState","xy2polar","x","y","Math","sqrt","atan2","rad2deg","rad","PI","hsl2rgb","hue","saturation","lightness","r1","g1","b1","chroma","hue1","abs","m","ColorWheel","withProps","Object","objectSpread","ratio","window","devicePixelRatio","width","screen","isMobile","size","calculateCanvasSize","ctx","initCanvas","canvas","_this","getContext","draw","_this$props","props","thickness","radius","imageData","createImageData","data","_xy2polar","_xy2polar2","slicedToArray","r","phi","deg","index","_hsl2rgb","_hsl2rgb2","red","green","blue","fillRect","translate","beginPath","arc","clip","putImageData","this","react_default","a","createElement","ref","height","Component","defaultProps","App","className","components_ColorWheel","Boolean","location","hostname","match","ReactDOM","render","es","store","createStore","reducers","applyMiddleware","thunk","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5259bf9c.chunk.js","sourcesContent":["import {combineReducers} from \"redux\";\nimport appState from \"./appState\";\n\nexport default combineReducers({\n    appState\n})","export default {}","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {withProps} from 'recompose';\nimport {isMobile} from 'react-device-detect';\n\n//region Helpers\nconst calculateCanvasSize = () => {\n    const ratio = window.devicePixelRatio || 1,\n      width = window.screen.width * ratio;\n    return isMobile ? {\n      ratio,\n      size: width - 40\n    } : {\n      ratio,\n      size: width * 0.3\n    };\n  },\n  xy2polar = (x, y) => {\n    let r = Math.sqrt(x * x + y * y);\n    let phi = Math.atan2(y, x);\n    return [r, phi];\n  },\n  rad2deg = rad => ((rad + Math.PI) / (2 * Math.PI)) * 360,\n  hsl2rgb = (hue, saturation, lightness) => {\n    let chroma = lightness * saturation;\n    let hue1 = hue / 60;\n    let x = chroma * (1 - Math.abs((hue1 % 2) - 1));\n    let r1, g1, b1;\n    if (hue1 >= 0 && hue1 <= 1) {\n      ([r1, g1, b1] = [chroma, x, 0]);\n    } else if (hue1 >= 1 && hue1 <= 2) {\n      ([r1, g1, b1] = [x, chroma, 0]);\n    } else if (hue1 >= 2 && hue1 <= 3) {\n      ([r1, g1, b1] = [0, chroma, x]);\n    } else if (hue1 >= 3 && hue1 <= 4) {\n      ([r1, g1, b1] = [0, x, chroma]);\n    } else if (hue1 >= 4 && hue1 <= 5) {\n      ([r1, g1, b1] = [x, 0, chroma]);\n    } else if (hue1 >= 5 && hue1 <= 6) {\n      ([r1, g1, b1] = [chroma, 0, x]);\n    }\n\n    let m = lightness - chroma;\n    let [r, g, b] = [r1 + m, g1 + m, b1 + m];\n\n    // Change r,g,b values from [0,1] to [0,255]\n    return [255 * r, 255 * g, 255 * b];\n  };\n\n//endregion\n\n@withProps(() => {\n  return {\n    ...(calculateCanvasSize())\n  };\n})\nclass ColorWheel extends Component {\n  static propTypes = {\n    size: PropTypes.number,\n    ratio: PropTypes.number,\n    thickness: PropTypes.number\n  };\n  static defaultProps = {\n    thickness: 0\n  };\n  ctx = null;\n\n  initCanvas = canvas => {\n    this.ctx = canvas.getContext(\"2d\");\n    this.draw();\n  };\n  draw = () => {\n    let {size, thickness} = this.props,\n      pixelPadding = 3,\n      radius = size / 2,\n      ctx = this.ctx,\n      imageData = ctx.createImageData(size, size),\n      data = imageData.data;\n    for (let x = -radius; x < radius; x++)\n      for (let y = -radius; y < radius; y++) {\n        let [r, phi] = xy2polar(x, y);\n        if (r > radius) continue;\n        if (thickness > 0 && r < (radius - thickness - pixelPadding)) continue;\n        let deg = rad2deg(phi),\n          adjustedX = x + radius,\n          adjustedY = y + radius,\n          pixelWidth = 4,\n          index = (adjustedX + (adjustedY * size)) * pixelWidth;\n        let hue = deg,\n          sat = r / radius,\n          // lightness = r / (2 * radius) + 1 / 2,\n          lightness = 1.0,\n          [red, green, blue] = hsl2rgb(hue, sat, lightness),\n          alpha = 255;\n        data[index] = red;\n        data[index + 1] = green;\n        data[index + 2] = blue;\n        data[index + 3] = alpha;\n      }\n\n    //create clipping path\n    ctx.fillRect(0, 0, 2 * radius, 2 * radius);\n    ctx.translate(radius, radius);\n    radius -= pixelPadding;\n    ctx.beginPath();\n    ctx.arc(0, 0, radius, 0, Math.PI * 2, true);\n    ctx.clip();\n\n    //fill with calculated data\n    // ctx.translate(0, 0);\n    ctx.putImageData(imageData, 0, 0);\n  };\n\n  render() {\n    const size = this.props.size;\n    return <canvas ref={this.initCanvas} width={size} height={size}/>;\n  }\n}\n\nexport default ColorWheel;","import React, {Component} from 'react';\nimport ColorWheel from \"./components/ColorWheel\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <ColorWheel/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport configStore from './store'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={configStore()}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {createStore, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducers from './reducers'\n\nexport default () => createStore(reducers, applyMiddleware(thunk))"],"sourceRoot":""}